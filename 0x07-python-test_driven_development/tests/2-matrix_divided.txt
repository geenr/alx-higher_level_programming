>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

can it handle integers only
>>> matrix = [
... [1, 2, 3],
... [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

can it handle floats only
>>> matrix = [
... [3.3, 6.6, 9.9],
... [9.9, 6.6, 3.3]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.1, 2.2, 3.3], [3.3, 2.2, 1.1]]

can it handle both floats and integers
>>> matrix = [
... [3.3, 6, 9.9],
... [9, 6.6, 3]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.1, 2.0, 3.3], [3.0, 2.2, 1.0]]

>>> matrix = [
... [1, "mee", 3],
... [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix = [
... [1, 2, 3, 4],
... [5, 6, 7]
... ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

>>> matrix = [
... [1, 2, 3],
... [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

>>> matrix = [
... [1, 2, 3],
... [4, 5, 6]
... ]
>>> print(matrix_divided(matrix, "mee"))
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix = []
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
